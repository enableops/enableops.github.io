"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[339],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,d=g["".concat(s,".").concat(m)]||g[m]||c[m]||i;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1813:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return u},toc:function(){return c},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={slug:"argocd-with-public-helm-charts-and-private-git",title:"ArgoCD with public charts and private values.yaml",authors:"yellowmegaman",tags:["gitops"]},s=void 0,p={permalink:"/enableops/enableops.github.io/gh-pages-dev/blog/argocd-with-public-helm-charts-and-private-git",editUrl:"https://github.com/enableops/enableops.github.io/edit/main/blog/blog/2021-11-19-argocd-with-private-git/index.md",source:"@site/blog/2021-11-19-argocd-with-private-git/index.md",title:"ArgoCD with public charts and private values.yaml",description:"Using ArgoCD for proper GitOps is great. You define your workload, put it in VCS, point ArgoCD to it with proper credentials and you\u2019re good. But there is a case, when you\u2019re not the one developing some piece of software, but you do want to store it\u2019s configuration privately.",date:"2021-11-19T00:00:00.000Z",formattedDate:"November 19, 2021",tags:[{label:"gitops",permalink:"/enableops/enableops.github.io/gh-pages-dev/blog/tags/gitops"}],readingTime:2.43,truncated:!0,authors:[{name:"Dmitry Rozhdestvenskiy",title:"Internal Engineer",url:"https://github.com/yellowmegaman",imageURL:"https://github.com/yellowmegaman.png",key:"yellowmegaman"}],nextItem:{title:"What is GitOps? The ArgoCD version",permalink:"/enableops/enableops.github.io/gh-pages-dev/blog/what-is-gitops-argocd"}},u={authorsImageUrls:[void 0]},c=[{value:"Traefik plugin configuration and credentials",id:"traefik-plugin-configuration-and-credentials",children:[],level:2},{value:"Application configuration",id:"application-configuration",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],g={toc:c};function m(e){var t=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Using ArgoCD for proper GitOps is great. You define your workload, put it in VCS, point ArgoCD to it with proper credentials and you\u2019re good. But there is a case, when you\u2019re not the one developing some piece of software, but you do want to store it\u2019s configuration privately."),(0,i.kt)("p",null,"We\u2019re talking about public helm charts. Copying public chart to your repo is not something you would love to do and it will bring lot of hassle \u2013 you will end up in situation when chart was updated by creators, and you need to sync or update."),(0,i.kt)("p",null,"But configuration is sensitive data, so you want to keep it private. This is some part of functionality not yet covered by ArgoCD itself, because you can\u2019t specify public repo and private repo for values.yaml at the same time."),(0,i.kt)("p",null,"Thankfully ArgoCD is extendable with plugins."),(0,i.kt)("h2",{id:"traefik-plugin-configuration-and-credentials"},"Traefik plugin configuration and credentials"),(0,i.kt)("p",null,"First things first, we need to create ArgoCD plugin and add it to our installation"),(0,i.kt)("p",null,"This is the configuration block for both our private repo with values.yaml and plugin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="values.yaml"',title:'"values.yaml"'},'---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  repositories: |\n    - url: git@github.com:yellowmegaman/somerepo\n      sshPrivateKeySecret:\n        name: some-repo-key\n        key: sshPrivateKey\n  configManagementPlugins: |\n    - name: helm-resolver\n      init:\n        command: [bash, -c]\n        args: ["helm repo add $REPO_NAME $REPO_URL && helm repo update"]\n      generate:\n        command: [bash, -c]\n        args: ["helm template --include-crds -n $ARGOCD_APP_NAMESPACE $COMMAND $ARGOCD_APP_NAME $REPO_NAME/$CHART_NAME --version $CHART_VERSION"]\n')),(0,i.kt)("p",null,"Add ssh private key to kubernetes secret:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl -n argocd create secret generic some-repo-key \\\\\n        --from-file=sshPrivateKey=$HOME/.ssh/id_ed25519\n")),(0,i.kt)("h2",{id:"application-configuration"},"Application configuration"),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"yellowmegaman/somerepo")," repo we have a folder ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," with file ",(0,i.kt)("inlineCode",{parentName:"p"},"traefik-values.yaml")," with following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="traefik-values.yaml"',title:'"traefik-values.yaml"'},'deployment:\n  kind: DaemonSet\nadditionalArguments:\n  - "--api=true"\n  - "--api.insecure=true"\n  - "--accesslog=true"\n  - "--providers.kubernetesIngress.ingressClass=traefik-cert-manager"\n')),(0,i.kt)("p",null,"We want to use it with official Traefik helm chart."),(0,i.kt)("p",null,"Let\u2019s verify the installation:\n",(0,i.kt)("img",{alt:"Screenshot of installation in ArgoCD",src:n(8698).Z})),(0,i.kt)("p",null,"Define application using helm-resolver plugin in app.yaml:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="app.yaml"',title:'"app.yaml"'},'---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: traefik-private-values\n  namespace: argocd\nspec:\n  destination:\n    namespace: traefik\n    server: <https://555.555.555.555>\n  project: default\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - Validate=true\n      - CreateNamespace=true\n  source:\n    path: values\n    plugin:\n      env:\n        - name:  REPO_NAME\n          value: "traefik"\n        - name:  REPO_URL\n          value: "<https://helm.traefik.io/traefik>"\n        - name:  CHART_NAME\n          value: "traefik"\n        - name:  CHART_VERSION\n          value: "10.6.2"\n        - name:  COMMAND\n          value: "--values traefik-values.yaml"\n      name: helm-resolver\n    repoURL: git@github.com/yellowmegaman/somerepo\n')),(0,i.kt)("p",null,"Apply application to local cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl -n argocd apply -f app.yaml\n")),(0,i.kt)("p",null,"Verify installation in ArgoCD:\n",(0,i.kt)("img",{alt:"Screenshot of installation in ArgoCD",src:n(192).Z})),(0,i.kt)("p",null,"One of the main changes to the configuration in our ",(0,i.kt)("inlineCode",{parentName:"p"},"traefik-values.yaml")," files was about changing deployment type to DaemonSet, let\u2019s verify that this change was included in the deployment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"k -n traefik get ds\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ k -n traefik get ds\nNAME                     DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\ntraefik-private-values   1         1         1       1            1           <none>          2m38s\n")),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Now that we have everything in place, we can change official chart version or our privately stored values to trigger an update. Woot!"))}m.isMDXComponent=!0},192:function(e,t,n){t.Z=n.p+"assets/images/final-installation-argocd-a62d4dad0962766bca2a087686f3ef85.png"},8698:function(e,t,n){t.Z=n.p+"assets/images/first-installation-argocd-034a2458a4870965c36c835b8d2d82e8.png"}}]);